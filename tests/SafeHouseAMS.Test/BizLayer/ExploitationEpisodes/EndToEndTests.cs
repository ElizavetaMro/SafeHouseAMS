using System;
using System.Threading;
using System.Threading.Tasks;
using FluentAssertions;
using SafeHouseAMS.BizLayer.ExploitationEpisodes;
using SafeHouseAMS.BizLayer.ExploitationEpisodes.Commands;
using SafeHouseAMS.DataLayer.Repositories;
using Xunit;
using Xunit.Categories;

namespace SafeHouseAMS.Test.BizLayer.ExploitationEpisodes
{
    public class EndToEndTests
    {
        [Fact, IntegrationTest]
        public async Task CreateEpisodeCommand_WhenApplied_CreatesEpisode()
        {
            //arrange
            var dbContext = TestHelper.CreateInMemoryDatabase();
            var repo = new EpisodesRepository(dbContext, TestHelper.CreateMapper());
            var bizLogic = new EpisodesCatalogue(repo);

            var survivorId = Guid.NewGuid();
            dbContext.Survivors.Add(new() { ID = survivorId, Name = "name", Num = 42});
            await dbContext.SaveChangesAsync();

            var contactReason = new ContactReason(
            new("involvement"),
            new("cse", CseType.Consummation),
            new("forced labour", ForcedLabourType.Agriculture),
            new("forced marriage", ForcedMarriageKind.Committed),
            new("cre"),
            new("begging"),
            new("forced criminal", CriminalActivityType.Other),
            new("other exploitation"),
            new("sexual violence"),
            new("domestic violence"),
            new("other violence"));
            var controlMethods = new ControlMethods(ControlMethodKind.Alcoholization, DebtKind.Embezzlement, "other");

            var sut = new CreateEpisode(Guid.NewGuid(), survivorId, contactReason, "place", "involvement details",
            false, TimeSpan.FromDays(30), controlMethods, EscapeStatus.PoliceReleased);

            //act
            await bizLogic.ApplyCommand(sut, CancellationToken.None);
            var result = await bizLogic.GetSingleAsync(sut.EntityID, CancellationToken.None);

            //assert
            result.Should().NotBeNull();
            result!.ContactReason.Should().BeEquivalentTo(contactReason);
            result.ControlMethods.Should().BeEquivalentTo(controlMethods);
            result.Place.Should().Be("place");
            result.InvolvementDescription.Should().Be("involvement details");
            result.WasJuvenile.Should().BeFalse();
            result.Duration.Should().Be(TimeSpan.FromDays(30));
            result.EscapeStatus.Should().Be(EscapeStatus.PoliceReleased);
        }

        [Fact, IntegrationTest]
        public async Task UpdateEpisodeCommand_WhenApplied_UpdatesEpisode()
        {
            //arrange
            var dbContext = TestHelper.CreateInMemoryDatabase();
            var repo = new EpisodesRepository(dbContext, TestHelper.CreateMapper());
            var bizLogic = new EpisodesCatalogue(repo);

            var survivorId = Guid.NewGuid();
            var episodeId = Guid.NewGuid();

            dbContext.Survivors.Add(new() { ID = survivorId, Name = "name", Num = 42});
            dbContext.Episodes.Add(new() { ID = episodeId, SurvivorID = survivorId });

            await dbContext.SaveChangesAsync();
            var updatedContactReason = new ContactReason(
            new("involvement"),
            new("cse", CseType.Consummation),
            new("forced labour", ForcedLabourType.Agriculture),
            new("forced marriage", ForcedMarriageKind.Committed),
            new("cre"),
            new("begging"),
            new("forced criminal", CriminalActivityType.Other),
            new("other exploitation"),
            new("sexual violence"),
            new("domestic violence"),
            new("other violence"));
            var updatedControlMethods = new ControlMethods(ControlMethodKind.Alcoholization, DebtKind.Embezzlement, "other");

            var sut = new UpdateEpisode(episodeId,
                updatedContactReason,
                "place",
                "involvement",
                true,
                TimeSpan.FromDays(42),
                updatedControlMethods,
                EscapeStatus.PoliceReleased | EscapeStatus.SelfEscaped);

            //act
            await bizLogic.ApplyCommand(sut, CancellationToken.None);
            var result = await bizLogic.GetSingleAsync(episodeId, CancellationToken.None);

            //assert
            result.Should().NotBeNull();
            result!.ContactReason.Should().BeEquivalentTo(updatedContactReason);
            result.ControlMethods.Should().BeEquivalentTo(updatedControlMethods);
            result.Place.Should().Be("place");
            result.InvolvementDescription.Should().Be("involvement");
            result.WasJuvenile.Should().BeTrue();
            result.Duration.Should().Be(TimeSpan.FromDays(42));
            result.EscapeStatus.Should().Be(EscapeStatus.PoliceReleased | EscapeStatus.SelfEscaped);
        }

        [Fact, IntegrationTest]
        public async Task DeleteEpisodeCommand_WhenApplied_MarksEpisodeAsDeleted()
        {
            //arrange
            var dbContext = TestHelper.CreateInMemoryDatabase();
            var repo = new EpisodesRepository(dbContext, TestHelper.CreateMapper());
            var bizLogic = new EpisodesCatalogue(repo);

            var survivorId = Guid.NewGuid();
            var episodeId = Guid.NewGuid();

            dbContext.Survivors.Add(new() { ID = survivorId, Name = "name", Num = 42});
            dbContext.Episodes.Add(new() { ID = episodeId, SurvivorID = survivorId });

            await dbContext.SaveChangesAsync();

            var sut = new DeleteEpisode(episodeId);

            //act
            await bizLogic.ApplyCommand(sut, CancellationToken.None);
            var result = await bizLogic.GetSingleAsync(episodeId, CancellationToken.None);

            //assert
            result.Should().BeNull();
        }
    }
}
